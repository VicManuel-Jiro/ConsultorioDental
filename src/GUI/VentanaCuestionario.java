/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Conexion.ConexionBD;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.awt.EventQueue;
import javax.swing.UnsupportedLookAndFeelException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import java.sql.Connection;
import java.sql.SQLException;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import java.awt.Toolkit;
import javax.swing.LayoutStyle;
import java.awt.LayoutManager;
import javax.swing.GroupLayout;
import java.awt.Font;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Component;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JCheckBox;
import javax.swing.JButton;
import java.sql.PreparedStatement;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author Jiro
 */
public class VentanaCuestionario extends VentanaControladaAbstract {

    private ConexionBD con;
    private PreparedStatement st;
    private int res;
    private Calendar c = Calendar.getInstance();

    /**
     * Creates new form VentanaCuestionario
     */
    public VentanaCuestionario() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbMolestia = new javax.swing.JCheckBox();
        cbOlor = new javax.swing.JCheckBox();
        cbSangrado = new javax.swing.JCheckBox();
        cbMovil = new javax.swing.JCheckBox();
        cbHabitos = new javax.swing.JCheckBox();
        cbAditamentos = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtMolestiaDetalle = new javax.swing.JTextField();
        txtOlorDetalle = new javax.swing.JTextField();
        txtSangradoDetalle = new javax.swing.JTextField();
        txtMovilDetalle = new javax.swing.JTextField();
        txtHabitosDetalle = new javax.swing.JTextField();
        txtAditamentosDetalle = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        fechacompleta = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtNoCepPacienteCuestionario = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        txtMotivoPacienteCuestionario = new javax.swing.JTextField();
        btnAgregarPacienteCuestionario = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Cuestionario inicial");

        cbMolestia.setText("¿Molestias o dolor de boca?");
        cbMolestia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMolestiaActionPerformed(evt);
            }
        });

        cbOlor.setText("¿Mal olor o sabor en la boca?");
        cbOlor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOlorActionPerformed(evt);
            }
        });

        cbSangrado.setText("¿Sangrado de encias?");
        cbSangrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSangradoActionPerformed(evt);
            }
        });

        cbMovil.setText("¿Tiene dientes moviles o le rechinan?");
        cbMovil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMovilActionPerformed(evt);
            }
        });

        cbHabitos.setText("¿Malos habitos orofaciales? (morder uñas/lapices/etc. chuparse los dedos, etc.)");
        cbHabitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHabitosActionPerformed(evt);
            }
        });

        cbAditamentos.setText("Aparte de cepillo de dientes, ¿Utiliza algun otro aditamento de limpieza?");
        cbAditamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAditamentosActionPerformed(evt);
            }
        });

        jLabel2.setText("Marque la casilla que corresponda a su situacion");

        jLabel3.setText("Detalles:");

        jLabel4.setText("Detalles:");

        jLabel5.setText("Detalles:");

        jLabel6.setText("Detalles:");

        jLabel7.setText("Detalles:");

        jLabel8.setText("¿Cuales?");

        txtMolestiaDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMolestiaDetalleActionPerformed(evt);
            }
        });
        txtMolestiaDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMolestiaDetalleKeyTyped(evt);
            }
        });

        txtOlorDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOlorDetalleKeyTyped(evt);
            }
        });

        txtSangradoDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSangradoDetalleKeyTyped(evt);
            }
        });

        txtMovilDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMovilDetalleKeyTyped(evt);
            }
        });

        txtHabitosDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHabitosDetalleKeyTyped(evt);
            }
        });

        txtAditamentosDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAditamentosDetalleKeyTyped(evt);
            }
        });

        jLabel9.setText("Ultima visita (dd/mm/yyyy):");

        fechacompleta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        fechacompleta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fechacompletaFocusLost(evt);
            }
        });
        fechacompleta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fechacompletaKeyTyped(evt);
            }
        });

        jLabel10.setText("En caso de primera visita ingrese fecha actual");

        jLabel11.setText("Numero de limpiezas al dia:");

        txtNoCepPacienteCuestionario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        txtNoCepPacienteCuestionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoCepPacienteCuestionarioActionPerformed(evt);
            }
        });
        txtNoCepPacienteCuestionario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNoCepPacienteCuestionarioKeyTyped(evt);
            }
        });

        jLabel12.setText("Motivo de consulta:");

        txtMotivoPacienteCuestionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMotivoPacienteCuestionarioActionPerformed(evt);
            }
        });
        txtMotivoPacienteCuestionario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMotivoPacienteCuestionarioKeyTyped(evt);
            }
        });

        btnAgregarPacienteCuestionario.setText("Agregar");
        btnAgregarPacienteCuestionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPacienteCuestionarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbSangrado)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtSangradoDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbMovil)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtMovilDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbHabitos)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtHabitosDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbAditamentos)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txtAditamentosDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbOlor)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbMolestia)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMolestiaDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOlorDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechacompleta, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(txtNoCepPacienteCuestionario, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(txtMotivoPacienteCuestionario, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(377, 377, 377)
                        .addComponent(btnAgregarPacienteCuestionario)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMolestia)
                    .addComponent(jLabel3)
                    .addComponent(txtMolestiaDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOlor)
                    .addComponent(jLabel4)
                    .addComponent(txtOlorDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSangrado)
                    .addComponent(jLabel5)
                    .addComponent(txtSangradoDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMovil)
                    .addComponent(jLabel6)
                    .addComponent(txtMovilDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbHabitos)
                    .addComponent(jLabel7)
                    .addComponent(txtHabitosDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAditamentos)
                    .addComponent(jLabel8)
                    .addComponent(txtAditamentosDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(fechacompleta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNoCepPacienteCuestionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtMotivoPacienteCuestionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAgregarPacienteCuestionario)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbMolestiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMolestiaActionPerformed
        // TODO add your handling code here:
        validacheck(evt.getActionCommand());
    }//GEN-LAST:event_cbMolestiaActionPerformed

    private void cbMovilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMovilActionPerformed
        // TODO add your handling code here:
        validacheck(evt.getActionCommand());
    }//GEN-LAST:event_cbMovilActionPerformed

    private void cbHabitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHabitosActionPerformed
        // TODO add your handling code here:
        validacheck(evt.getActionCommand());
    }//GEN-LAST:event_cbHabitosActionPerformed

    private void fechacompletaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechacompletaKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isDigit(c)||c=='/') {
            if (this.fechacompleta.getText().length() < 10) {
                if (this.fechacompleta.getText().length() == 2&& c!='/') {
                    this.fechacompleta.setText(this.fechacompleta.getText() + "/");
                } else if (this.fechacompleta.getText().length() == 5&& c!='/') {
                    this.fechacompleta.setText(this.fechacompleta.getText() + "/");
                }
            } else if (this.fechacompleta.getText().length() > 9) {
                evt.consume();
                Toolkit.getDefaultToolkit().beep();
            }
        } else {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_fechacompletaKeyTyped

    private void cbOlorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOlorActionPerformed
        // TODO add your handling code here:
        validacheck(evt.getActionCommand());
    }//GEN-LAST:event_cbOlorActionPerformed

    private void cbSangradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSangradoActionPerformed
        // TODO add your handling code here:
        validacheck(evt.getActionCommand());
    }//GEN-LAST:event_cbSangradoActionPerformed

    private void cbAditamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAditamentosActionPerformed
        // TODO add your handling code here:
        validacheck(evt.getActionCommand());
    }//GEN-LAST:event_cbAditamentosActionPerformed

    private void txtMotivoPacienteCuestionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMotivoPacienteCuestionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMotivoPacienteCuestionarioActionPerformed

    private void txtMotivoPacienteCuestionarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMotivoPacienteCuestionarioKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtMotivoPacienteCuestionario.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtMotivoPacienteCuestionarioKeyTyped

    private void txtNoCepPacienteCuestionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoCepPacienteCuestionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoCepPacienteCuestionarioActionPerformed

    private void txtNoCepPacienteCuestionarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoCepPacienteCuestionarioKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo numeros");
        } else if (this.txtNoCepPacienteCuestionario.getText().length() >= 2) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_txtNoCepPacienteCuestionarioKeyTyped

    private void btnAgregarPacienteCuestionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPacienteCuestionarioActionPerformed
        // TODO add your handling code here:
        if (this.txtNoCepPacienteCuestionario.getText().length() < 1 || this.txtMotivoPacienteCuestionario.getText().length() < 1) {
            JOptionPane.showMessageDialog(this, "No puede dejar Motivo de consulta o numero de cepillados en blanco", "Alerta", 2);
        } else {
            try {
                if (validafecha(fechacompleta.getText())) {
                    this.con = new ConexionBD();
                    Connection cn = this.con.getConexion();
                    try {
                        String sql = "INSERT INTO cuestionario (id_paciente,dolor,olor,sangrado,diente_movil,habitos,aditamentos,nota_dolor,nota_olor,nota_sangrado,nota_dmovil,notas_habitos,det_aditamentos,ultima_visita,num_cep_dientes,motivo_visita) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,to_date(?,'DD/MM/YYYY'),?,?)";
                        this.st = cn.prepareStatement(sql);
                        this.st.setInt(1, Integer.parseInt(this.superCtrl.getClave()));
                        if (this.cbMolestia.isSelected()) {
                            this.st.setInt(2, 1);
                            this.st.setString(8, this.txtMolestiaDetalle.getText());
                        } else {
                            this.st.setInt(2, 0);
                            this.st.setNull(8, 4);
                        }
                        if (this.cbOlor.isSelected()) {
                            this.st.setInt(3, 1);
                            this.st.setString(9, this.txtOlorDetalle.getText());
                        } else {
                            this.st.setInt(3, 0);
                            this.st.setNull(9, 4);
                        }
                        if (this.cbSangrado.isSelected()) {
                            this.st.setInt(4, 1);
                            this.st.setString(10, this.txtSangradoDetalle.getText());
                        } else {
                            this.st.setInt(4, 0);
                            this.st.setNull(10, 4);
                        }
                        if (this.cbMovil.isSelected()) {
                            this.st.setInt(5, 1);
                            this.st.setString(11, this.txtMovilDetalle.getText());
                        } else {
                            this.st.setInt(5, 0);
                            this.st.setNull(11, 4);
                        }
                        if (this.cbHabitos.isSelected()) {
                            this.st.setInt(6, 1);
                            this.st.setString(12, this.txtHabitosDetalle.getText());
                        } else {
                            this.st.setInt(6, 0);
                            this.st.setNull(12, 4);
                        }
                        if (this.cbAditamentos.isSelected()) {
                            this.st.setInt(7, 1);
                            this.st.setString(13, this.txtAditamentosDetalle.getText());
                        } else {
                            this.st.setInt(7, 0);
                            this.st.setNull(13, 4);
                        }
                        this.st.setString(14, fechacompleta.getText());
                        this.st.setInt(15, Integer.parseInt(this.txtNoCepPacienteCuestionario.getText()));
                        this.st.setString(16, this.txtMotivoPacienteCuestionario.getText());
                        this.res = this.st.executeUpdate();
                        if (this.res > 0) {
                            this.con.desconectar();
                            this.st.close();
                            limpiar();
                            this.superCtrl.muestraVentanaAgregarCuestionario(false);
                        } else {
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un problema al registrar el cuestionario, intente de nuevo.", "Error", 0);
                        }
                        if (cn != null) {
                            cn.close();
                        }
                    } catch (Throwable throwable) {
                        if (cn != null)
                        try {   
                            cn.close();
                        } catch (Throwable throwable1) {
                            throwable.addSuppressed(throwable1);
                        }
                        throw throwable;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese una fecha valida", "Alerta", 2);
                }

            } catch (HeadlessException | NumberFormatException | java.sql.SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }

    }//GEN-LAST:event_btnAgregarPacienteCuestionarioActionPerformed

    private void txtMolestiaDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMolestiaDetalleActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtMolestiaDetalleActionPerformed

    private void txtMolestiaDetalleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMolestiaDetalleKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtMolestiaDetalle.getText().length() >= 20) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtMolestiaDetalleKeyTyped

    private void txtOlorDetalleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOlorDetalleKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtOlorDetalle.getText().length() >= 20) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtOlorDetalleKeyTyped

    private void txtSangradoDetalleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSangradoDetalleKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtSangradoDetalle.getText().length() >= 20) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtSangradoDetalleKeyTyped

    private void txtMovilDetalleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMovilDetalleKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtMovilDetalle.getText().length() >= 20) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtMovilDetalleKeyTyped

    private void txtHabitosDetalleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHabitosDetalleKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtHabitosDetalle.getText().length() >= 20) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtHabitosDetalleKeyTyped

    private void txtAditamentosDetalleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAditamentosDetalleKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtAditamentosDetalle.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtAditamentosDetalleKeyTyped

    private void fechacompletaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fechacompletaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_fechacompletaFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaCuestionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaCuestionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaCuestionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaCuestionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaCuestionario().setVisible(true);
            }
        });
    }

    private void validacheck(String cadena) {
        if (null != cadena) {
            String str = cadena;
            byte b = -1;
            switch (str.hashCode()) {
                case -389776300:
                    if (str.equals("molestia")) {
                        b = 0;
                    }
                    break;
                case 3414144:
                    if (str.equals("olor")) {
                        b = 1;
                    }
                    break;
                case 1996058625:
                    if (str.equals("sangrado")) {
                        b = 2;
                    }
                    break;
                case 1243699749:
                    if (str.equals("moviles")) {
                        b = 3;
                    }
                    break;
                case 681878104:
                    if (str.equals("habitos")) {
                        b = 4;
                    }
                    break;
                case -2072936683:
                    if (str.equals("aditamentos")) {
                        b = 5;
                    }
                    break;
            }
            switch (b) {
                case 0:
                    if (this.txtMolestiaDetalle.isEnabled()) {
                        this.txtMolestiaDetalle.setEnabled(false);
                        this.txtMolestiaDetalle.setText(null);
                        break;
                    }
                    this.txtMolestiaDetalle.setEnabled(true);
                    break;
                case 1:
                    if (this.txtOlorDetalle.isEnabled()) {
                        this.txtOlorDetalle.setEnabled(false);
                        this.txtOlorDetalle.setText(null);
                        break;
                    }
                    this.txtOlorDetalle.setEnabled(true);
                    break;
                case 2:
                    if (this.txtSangradoDetalle.isEnabled()) {
                        this.txtSangradoDetalle.setEnabled(false);
                        this.txtSangradoDetalle.setText(null);
                        break;
                    }
                    this.txtSangradoDetalle.setEnabled(true);
                    break;
                case 3:
                    if (this.txtMovilDetalle.isEnabled()) {
                        this.txtMovilDetalle.setEnabled(false);
                        this.txtMovilDetalle.setText(null);
                        break;
                    }
                    this.txtMovilDetalle.setEnabled(true);
                    break;
                case 4:
                    if (this.txtHabitosDetalle.isEnabled()) {
                        this.txtHabitosDetalle.setEnabled(false);
                        this.txtHabitosDetalle.setText(null);
                        break;
                    }
                    this.txtHabitosDetalle.setEnabled(true);
                    break;
                case 5:
                    if (this.txtAditamentosDetalle.isEnabled()) {
                        this.txtAditamentosDetalle.setEnabled(false);
                        this.txtAditamentosDetalle.setText(null);
                        break;
                    }
                    this.txtAditamentosDetalle.setEnabled(true);
                    break;
            }
        }

    }

    private void limpiar() {
        this.cbMolestia.setSelected(false);
        this.txtMolestiaDetalle.setEnabled(true);
        this.txtMolestiaDetalle.setText(null);
        this.txtMolestiaDetalle.setEnabled(false);

        this.cbHabitos.setSelected(false);
        this.txtHabitosDetalle.setEnabled(true);
        this.txtHabitosDetalle.setText(null);
        this.txtHabitosDetalle.setEnabled(false);

        this.cbMovil.setSelected(false);
        this.txtMovilDetalle.setEnabled(true);
        this.txtMovilDetalle.setText(null);
        this.txtMovilDetalle.setEnabled(false);

        this.cbAditamentos.setSelected(false);
        this.txtAditamentosDetalle.setEnabled(true);
        this.txtAditamentosDetalle.setText(null);
        this.txtAditamentosDetalle.setEnabled(false);

        this.cbOlor.setSelected(false);
        this.txtOlorDetalle.setEnabled(true);
        this.txtOlorDetalle.setText(null);
        this.txtOlorDetalle.setEnabled(false);

        this.cbSangrado.setSelected(false);
        this.txtSangradoDetalle.setEnabled(true);
        this.txtSangradoDetalle.setText(null);
        this.txtSangradoDetalle.setEnabled(false);

        this.fechacompleta.setText(null);
        this.txtNoCepPacienteCuestionario.setText(null);
        this.txtMotivoPacienteCuestionario.setText(null);
    }

    private boolean validafecha(final String fecha) {
        if (fechacompleta.getText().length()<10){
            return false;
        }
        String[] fecha2 = fecha.split("/");
        String dia = fecha2[0];
        String mes = fecha2[1];
        String annio = fecha2[2];
        Date dt = new Date();
        int dia2 = dt.getDate();
        int mes2 = dt.getMonth() + 1;
        int annio2 = dt.getYear() + 1900;
        final SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
        try {
            formatoFecha.setLenient(false);
            formatoFecha.parse(dia + "/" + mes + "/" + annio);
        } catch (ParseException e) {
            return false;
        }
        if (Integer.parseInt(annio) <= annio2) {
            if (Integer.parseInt(annio) == annio2) {
                if (Integer.parseInt(mes) > mes2) {
                    return false;
                }
                if (Integer.parseInt(dia) > dia2) {
                    return false;
                }
            } else if (Integer.parseInt(annio) < annio2 - 100) {
                return false;
            }
            return true;
        }
        return false;
    }


    private String aFecha(String dia, String mes, String annio) {
        if (dia.length() < 2) {
            dia = "0" + dia;
        } else if (mes.length() < 2) {
            mes = "0" + mes;
        }
        //SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
        return dia + "/" + mes + "/" + annio;
    }

    public void actionPerformed(ActionEvent e) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarPacienteCuestionario;
    private javax.swing.JCheckBox cbAditamentos;
    private javax.swing.JCheckBox cbHabitos;
    private javax.swing.JCheckBox cbMolestia;
    private javax.swing.JCheckBox cbMovil;
    private javax.swing.JCheckBox cbOlor;
    private javax.swing.JCheckBox cbSangrado;
    private javax.swing.JFormattedTextField fechacompleta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtAditamentosDetalle;
    private javax.swing.JTextField txtHabitosDetalle;
    private javax.swing.JTextField txtMolestiaDetalle;
    private javax.swing.JTextField txtMotivoPacienteCuestionario;
    private javax.swing.JTextField txtMovilDetalle;
    private javax.swing.JFormattedTextField txtNoCepPacienteCuestionario;
    private javax.swing.JTextField txtOlorDetalle;
    private javax.swing.JTextField txtSangradoDetalle;
    // End of variables declaration//GEN-END:variables
}
