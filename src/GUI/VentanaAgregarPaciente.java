/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import Conexion.ConexionBD;

import Control.ValidaCorreo;
//import com.sun.jdi.connect.spi.Connection; 
//HeadlessException
import java.sql.Connection;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.awt.event.ActionEvent;
import java.awt.HeadlessException;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import java.sql.CallableStatement;

/**
 *
 * @author Jiro
 */
public class VentanaAgregarPaciente extends VentanaControladaAbstract {
    private ConexionBD con;

    private final ValidaCorreo valida = new ValidaCorreo();
    private PreparedStatement st;
    private ResultSet rt;
    private int g;
    private int res;
    private int last;
    
    /**
     * Creates new form VentanaAgregarPaciente
     */
    public VentanaAgregarPaciente() {
        initComponents();
        setLocationRelativeTo(null);
        llenar_combo_actividad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombrePacienteAgregar = new javax.swing.JLabel();
        lblApellidosPacienteAgregar = new javax.swing.JLabel();
        lblGeneroPacienteAgregar = new javax.swing.JLabel();
        lblEdoCivilPacienteAgregar = new javax.swing.JLabel();
        lblOcupacionPacienteAgregar = new javax.swing.JLabel();
        lblTelefonoPacienteAgregar = new javax.swing.JLabel();
        lblCorreoPacienteAgregar = new javax.swing.JLabel();
        lblCpPacienteAgregar = new javax.swing.JLabel();
        lblNoInPacienteAgregar = new javax.swing.JLabel();
        lblNoExPacienteAgregar = new javax.swing.JLabel();
        lblCallePacienteAgregar = new javax.swing.JLabel();
        lblColoniaPacienteAgregar = new javax.swing.JLabel();
        lblCiudadPacienteAgregar = new javax.swing.JLabel();
        lblEstadoPacienteAgregar = new javax.swing.JLabel();
        btnCancelarPacienteAgregar = new javax.swing.JButton();
        btnAgregarPacienteAgregar = new javax.swing.JButton();
        txtNombrePacienteAgregar = new javax.swing.JTextField();
        txtApellidosPacienteAgregar = new javax.swing.JTextField();
        txtOcupacionPacienteAgregar = new javax.swing.JTextField();
        txtTelefonoPacienteAgregar = new javax.swing.JTextField();
        txtCorreoPacienteAgregar = new javax.swing.JTextField();
        cbGeneroPacienteAgregar = new javax.swing.JComboBox<>();
        cbEdoCivilPacienteAgregar = new javax.swing.JComboBox<>();
        cbEstadoPacienteAgregar = new javax.swing.JComboBox<>();
        txtCiudadPacienteAgregar = new javax.swing.JTextField();
        txtColoniaPacienteAgregar = new javax.swing.JTextField();
        txtCallePacienteAgregar = new javax.swing.JTextField();
        txtNoExPacienteAgregar = new javax.swing.JTextField();
        txtNoInPacienteAgregar = new javax.swing.JTextField();
        txtCpPacienteAgregar = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        lblNombrePacienteAgregar.setText("Nombre:");

        lblApellidosPacienteAgregar.setText("Apellidos:");

        lblGeneroPacienteAgregar.setText("Genero:");

        lblEdoCivilPacienteAgregar.setText("Estado Civil:");

        lblOcupacionPacienteAgregar.setText("Ocupacion:");

        lblTelefonoPacienteAgregar.setText("Telefono:");

        lblCorreoPacienteAgregar.setText("Correo:");

        lblCpPacienteAgregar.setText("C.P.");

        lblNoInPacienteAgregar.setText("No. Int.");

        lblNoExPacienteAgregar.setText("No. Ext.");

        lblCallePacienteAgregar.setText("Calle:");

        lblColoniaPacienteAgregar.setText("Colonia:");

        lblCiudadPacienteAgregar.setText("Ciudad:");

        lblEstadoPacienteAgregar.setText("Estado:");

        btnCancelarPacienteAgregar.setText("Cancelar");
        btnCancelarPacienteAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarPacienteAgregarActionPerformed(evt);
            }
        });

        btnAgregarPacienteAgregar.setText("Aceptar");
        btnAgregarPacienteAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPacienteAgregarActionPerformed(evt);
            }
        });

        txtNombrePacienteAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombrePacienteAgregarActionPerformed(evt);
            }
        });
        txtNombrePacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombrePacienteAgregarKeyTyped(evt);
            }
        });

        txtApellidosPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosPacienteAgregarKeyTyped(evt);
            }
        });

        txtOcupacionPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOcupacionPacienteAgregarKeyTyped(evt);
            }
        });

        txtTelefonoPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoPacienteAgregarKeyTyped(evt);
            }
        });

        txtCorreoPacienteAgregar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCorreoPacienteAgregarFocusLost(evt);
            }
        });
        txtCorreoPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCorreoPacienteAgregarKeyTyped(evt);
            }
        });

        cbGeneroPacienteAgregar.setModel(new DefaultComboBoxModel(new String[] { "", "H", "M" }));

        cbEdoCivilPacienteAgregar.setModel(new DefaultComboBoxModel(new String[] { "", "Soltero", "Casado", "Divorciado" }));

        cbEstadoPacienteAgregar.setModel(new DefaultComboBoxModel(new String[] {""}));

        txtCiudadPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCiudadPacienteAgregarKeyTyped(evt);
            }
        });

        txtColoniaPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtColoniaPacienteAgregarKeyTyped(evt);
            }
        });

        txtCallePacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCallePacienteAgregarKeyTyped(evt);
            }
        });

        txtNoExPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNoExPacienteAgregarKeyTyped(evt);
            }
        });

        txtNoInPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNoInPacienteAgregarKeyTyped(evt);
            }
        });

        txtCpPacienteAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCpPacienteAgregarKeyTyped(evt);
            }
        });

        jLabel17.setText("(Ingrese 0 si no aplica)");

        jLabel18.setText("(Opcional)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblCallePacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblColoniaPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCiudadPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEstadoPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCorreoPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTelefonoPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblApellidosPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGeneroPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOcupacionPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEdoCivilPacienteAgregar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbGeneroPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbEdoCivilPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCallePacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtColoniaPacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCiudadPacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbEstadoPacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCorreoPacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTelefonoPacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtOcupacionPacienteAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtApellidosPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNombrePacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombrePacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnCancelarPacienteAgregar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAgregarPacienteAgregar))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblCpPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtCpPacienteAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblNoExPacienteAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                        .addComponent(lblNoInPacienteAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtNoExPacienteAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                        .addComponent(txtNoInPacienteAgregar))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel17)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombrePacienteAgregar)
                    .addComponent(txtNombrePacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellidosPacienteAgregar)
                    .addComponent(txtApellidosPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGeneroPacienteAgregar)
                    .addComponent(cbGeneroPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEdoCivilPacienteAgregar)
                    .addComponent(cbEdoCivilPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOcupacionPacienteAgregar)
                    .addComponent(txtOcupacionPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefonoPacienteAgregar)
                    .addComponent(txtTelefonoPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCorreoPacienteAgregar)
                    .addComponent(txtCorreoPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstadoPacienteAgregar)
                    .addComponent(cbEstadoPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadPacienteAgregar)
                    .addComponent(txtCiudadPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblColoniaPacienteAgregar)
                    .addComponent(txtColoniaPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCallePacienteAgregar)
                    .addComponent(txtCallePacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoExPacienteAgregar)
                    .addComponent(txtNoExPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoInPacienteAgregar)
                    .addComponent(txtNoInPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCpPacienteAgregar)
                    .addComponent(txtCpPacienteAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarPacienteAgregar)
                    .addComponent(btnAgregarPacienteAgregar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarPacienteAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarPacienteAgregarActionPerformed
        if ("agregar".equals(evt.getActionCommand())) {
            limpiar();
            this.superCtrl.muestraVentanaPacientes(true);
        } else {
            limpiar();
            this.superCtrl.muestraVentanaModificarPacientes(true);
        }
    }//GEN-LAST:event_btnCancelarPacienteAgregarActionPerformed

    private void txtCorreoPacienteAgregarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCorreoPacienteAgregarFocusLost
        // TODO add your handling code here:
        if (!this.valida.Valida(this.txtCorreoPacienteAgregar.getText())) {
            JOptionPane.showMessageDialog(this, "Ingrese un correo valido", "Alerta", 2);
        }
    }//GEN-LAST:event_txtCorreoPacienteAgregarFocusLost

    private void txtNombrePacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombrePacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras", "Atenci�n", 1);
        } else if (this.txtNombrePacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtNombrePacienteAgregarKeyTyped

    private void txtApellidosPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras", "Atenci�n", 1);
        } else if (this.txtApellidosPacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtApellidosPacienteAgregarKeyTyped

    private void txtOcupacionPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOcupacionPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras", "Atenci�n", 1);
        } else if (this.txtOcupacionPacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtOcupacionPacienteAgregarKeyTyped

    private void txtCorreoPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorreoPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (this.txtCorreoPacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_txtCorreoPacienteAgregarKeyTyped

    private void txtTelefonoPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo numeros", "Atenci�n", 1);
        } else if (this.txtTelefonoPacienteAgregar.getText().length() >= 10) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_txtTelefonoPacienteAgregarKeyTyped

    private void txtCiudadPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCiudadPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras", "Atenci�n", 1);
        } else if (this.txtCiudadPacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtCiudadPacienteAgregarKeyTyped

    private void txtColoniaPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtColoniaPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isDigit(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo letras");
        } else if (this.txtColoniaPacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtColoniaPacienteAgregarKeyTyped

    private void txtCallePacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCallePacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (this.txtCallePacienteAgregar.getText().length() >= 30) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        } else if (Character.isLowerCase(validar)) {
            evt.setKeyChar(Character.toUpperCase(validar));
        }
    }//GEN-LAST:event_txtCallePacienteAgregarKeyTyped

    private void txtNoExPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoExPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo numeros");
        } else if (this.txtNoExPacienteAgregar.getText().length() >= 11) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_txtNoExPacienteAgregarKeyTyped

    private void txtNoInPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoInPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo numeros");
        } else if (this.txtNoInPacienteAgregar.getText().length() >= 11) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_txtNoInPacienteAgregarKeyTyped

    private void txtCpPacienteAgregarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpPacienteAgregarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this.rootPane, "Ingrese solo numeros");
        } else if (this.txtCpPacienteAgregar.getText().length() >= 5) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_txtCpPacienteAgregarKeyTyped

    private void txtNombrePacienteAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombrePacienteAgregarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombrePacienteAgregarActionPerformed

    private void btnAgregarPacienteAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPacienteAgregarActionPerformed
        // TODO add your handling code here:
        if ("agregar".equals(evt.getActionCommand())) {
            if (this.cbEstadoPacienteAgregar.getSelectedIndex() == 0 || this.cbEdoCivilPacienteAgregar.getSelectedIndex() == 0 || this.cbGeneroPacienteAgregar.getSelectedIndex() == 0 || this.txtCpPacienteAgregar.getText().length() < 1 || this.txtNoExPacienteAgregar.getText().length() < 1 || this.txtCallePacienteAgregar.getText().length() < 1 || this.txtColoniaPacienteAgregar.getText().length() < 1 || this.txtCiudadPacienteAgregar.getText().length() < 1 || this.txtCorreoPacienteAgregar.getText().length() < 1 || this.txtTelefonoPacienteAgregar.getText().length() < 1 || this.txtOcupacionPacienteAgregar.getText().length() < 1 || this.txtApellidosPacienteAgregar.getText().length() < 1 || this.txtNombrePacienteAgregar.getText().length() < 1) {
                JOptionPane.showMessageDialog(this, "No puede dejar campos en blanco", "Alerta", 2);
            }
            else if (this.txtTelefonoPacienteAgregar.getText().length() <= 9) {
                JOptionPane.showMessageDialog(this, "Ingrese telefono a 10 digitos", "Alerta", 2);
            }
            else if (this.txtCpPacienteAgregar.getText().length() <= 4) {
                JOptionPane.showMessageDialog(this, "Ingrese un codigo postal valido a 5 digitos", "Alerta", 2);
            }
            else {
                try {
                    this.con = new ConexionBD();
                    final Connection cn = this.con.getConexion();
                    int antes=0,despues=0;
                    try {
                        this.st = cn.prepareStatement("select count(id_paciente) as conteo from paciente");
                        this.rt = this.st.executeQuery();
                        if (this.rt.next()) {
                            antes=this.rt.getInt("conteo");
                        }
                        //final String sql = "INSERT INTO paciente (nombre,apellidos,genero,edo_civil,ocupacion,tel,email,edo,ciudad,colonia,calle,numero_exterior,numero_interior,cp) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        final String sql="{call paquetepaciente.addpaciente(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
                        CallableStatement st = cn.prepareCall(sql);
                        //st.setString(1, this.superCtrl.getClave());
                        st.setString(1, this.txtNombrePacienteAgregar.getText());
                        st.setString(2, this.txtApellidosPacienteAgregar.getText());
                        if (this.cbGeneroPacienteAgregar.getSelectedIndex() == 1) {
                            this.g = 1;
                        }
                        else {
                            this.g = 0;
                        }
                        st.setInt(3, this.g);
                        st.setString(4, this.cbEdoCivilPacienteAgregar.getSelectedItem().toString().toUpperCase());
                        st.setString(5, this.txtOcupacionPacienteAgregar.getText());
                        st.setLong(6, Long.parseLong(this.txtTelefonoPacienteAgregar.getText()));
                        st.setString(7, this.txtCorreoPacienteAgregar.getText());
                        st.setString(8, this.cbEstadoPacienteAgregar.getSelectedItem().toString().toUpperCase());
                        st.setString(9, this.txtCiudadPacienteAgregar.getText());
                        st.setString(10, this.txtColoniaPacienteAgregar.getText());
                        st.setString(11, this.txtCallePacienteAgregar.getText());
                        st.setInt(12, Integer.parseInt(this.txtNoExPacienteAgregar.getText()));
                        if (this.txtNoInPacienteAgregar.getText().length() < 1) {
                            st.setInt(13, 0);
                        }
                        else {
                            st.setInt(13, Integer.parseInt(this.txtNoInPacienteAgregar.getText()));
                        }
                        st.setInt(14, Integer.parseInt(this.txtCpPacienteAgregar.getText()));
                        System.out.println("llego aqui 1");
                        boolean f = st.execute();
                        /*(this.st = cn.prepareStatement(sql)).setString(1, this.txtNombrePacienteAgregar.getText());
                        this.st.setString(2, this.txtApellidosPacienteAgregar.getText());
                        if (this.cbGeneroPacienteAgregar.getSelectedIndex() == 1) {
                            this.g = 1;
                        }
                        else {
                            this.g = 0;
                        }
                        this.st.setInt(3, this.g);
                        this.st.setString(4, this.cbEdoCivilPacienteAgregar.getSelectedItem().toString().toUpperCase());
                        this.st.setString(5, this.txtOcupacionPacienteAgregar.getText());
                        this.st.setLong(6, Long.parseLong(this.txtTelefonoPacienteAgregar.getText()));
                        this.st.setString(7, this.txtCorreoPacienteAgregar.getText());
                        this.st.setString(8, this.cbEstadoPacienteAgregar.getSelectedItem().toString().toUpperCase());
                        this.st.setString(9, this.txtCiudadPacienteAgregar.getText());
                        this.st.setString(10, this.txtColoniaPacienteAgregar.getText());
                        this.st.setString(11, this.txtCallePacienteAgregar.getText());
                        this.st.setInt(12, Integer.parseInt(this.txtNoExPacienteAgregar.getText()));
                        if (this.txtNoInPacienteAgregar.getText().length() < 1) {
                            this.st.setInt(13, 0);
                        }
                        else {
                            this.st.setInt(13, Integer.parseInt(this.txtNoInPacienteAgregar.getText()));
                        }
                        this.st.setInt(14, Integer.parseInt(this.txtCpPacienteAgregar.getText()));
                        System.out.println("llego aqui 1");
                        this.res = this.st.executeUpdate();
                        //*/
                        this.rt = this.st.executeQuery("select count(id_paciente) as conteo from paciente");
                        if (this.rt.next()) {
                            despues=this.rt.getInt("conteo");
                        }
                        System.out.println(antes);
                        System.out.println(despues);
                        if (antes!=despues) {
                        System.out.println("llego aqui 2");
                        this.rt = this.st.executeQuery("select * from paciente where rownum=1 order by id_paciente desc");
                        System.out.println("llego aqui 2.5");
                        //rt.beforeFirst();
                        this.rt.next();
                        System.out.println("llego aqui 3");
                        
                            this.last = this.rt.getInt(1);
                            JOptionPane.showMessageDialog(this,"el id del paciente es: "+this.last, "Atenci\u00f3n", 1);
                        }
                        else {
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un problema al registrar", "Error", 0);
                        }
                        System.out.println("llego aqui 4");
                        if (cn != null) {
                            cn.close();
                        }
                    }
                    catch (Throwable t) {
                        if (cn != null) {
                            try {
                                cn.close();
                            }
                            catch (Throwable exception) {
                                t.addSuppressed(exception);
                            }
                        }
                        throw t;
                    }
                    this.con.desconectar();
                    this.rt.close();
                    this.st.close();
                    this.limpiar();
                    this.superCtrl.setClave(""+this.last);
                    this.superCtrl.muestraVentanaAgregarCuestionario(true);
                }
                catch (HeadlessException | NumberFormatException | SQLException ex4) {
                    JOptionPane.showMessageDialog(null, ex4.getMessage(), "Error", 0);
                }
            }
        }
        else if (JOptionPane.showConfirmDialog(null, "¿Esta seguro que desea modificar al paciente?\nESTA ACCION NO SE PUEDE DESHACER", "Alerta!", 0, 2) == 0) {
            if (this.cbEstadoPacienteAgregar.getSelectedIndex() == 0 || this.cbEdoCivilPacienteAgregar.getSelectedIndex() == 0 || this.cbGeneroPacienteAgregar.getSelectedIndex() == 0 || this.txtCpPacienteAgregar.getText().length() < 1 || this.txtNoExPacienteAgregar.getText().length() < 1 || this.txtCallePacienteAgregar.getText().length() < 1 || this.txtColoniaPacienteAgregar.getText().length() < 1 || this.txtCiudadPacienteAgregar.getText().length() < 1 || this.txtCorreoPacienteAgregar.getText().length() < 1 || this.txtTelefonoPacienteAgregar.getText().length() < 1 || this.txtOcupacionPacienteAgregar.getText().length() < 1 || this.txtApellidosPacienteAgregar.getText().length() < 1 || this.txtNombrePacienteAgregar.getText().length() < 1) {
                JOptionPane.showMessageDialog(this, "No puede dejar campos en blanco", "Alerta", 2);
            }
            else if (this.txtTelefonoPacienteAgregar.getText().length() <= 9) {
                JOptionPane.showMessageDialog(this, "Ingrese telefono a 10 digitos", "Alerta", 2);
            }
            else if (this.txtCpPacienteAgregar.getText().length() <= 4) {
                JOptionPane.showMessageDialog(this, "Ingrese un codigo postal valido a 5 digitos", "Alerta", 2);
            }
            else {
                try {
                    this.con = new ConexionBD();
                    final Connection cn = this.con.getConexion();
                    try {
                        String sql = "UPDATE paciente SET nombre=?,apellidos=?,genero=?,edo_civil=?,ocupacion=?,tel=?,email=?,edo=?,ciudad=?,colonia=?,calle=?,numero_exterior=?,numero_interior=?,cp=? where id_paciente=?";
                        (this.st = cn.prepareStatement(sql)).setString(1, this.txtNombrePacienteAgregar.getText());
                        this.st.setString(2, this.txtApellidosPacienteAgregar.getText());
                        if (this.cbGeneroPacienteAgregar.getSelectedIndex() == 1) {
                            this.g = 1;
                        }
                        else {
                            this.g = 0;
                        }
                        this.st.setInt(3, this.g);
                        this.st.setString(4, this.cbEdoCivilPacienteAgregar.getSelectedItem().toString().toUpperCase());
                        this.st.setString(5, this.txtOcupacionPacienteAgregar.getText());
                        this.st.setLong(6, Long.parseLong(this.txtTelefonoPacienteAgregar.getText()));
                        this.st.setString(7, this.txtCorreoPacienteAgregar.getText());
                        this.st.setString(8, this.cbEstadoPacienteAgregar.getSelectedItem().toString().toUpperCase());
                        this.st.setString(9, this.txtCiudadPacienteAgregar.getText());
                        this.st.setString(10, this.txtColoniaPacienteAgregar.getText());
                        this.st.setString(11, this.txtCallePacienteAgregar.getText());
                        this.st.setInt(12, Integer.parseInt(this.txtNoExPacienteAgregar.getText()));
                        if (this.txtNoInPacienteAgregar.getText().length() < 1) {
                            this.st.setInt(13, 0);
                        }
                        else {
                            this.st.setInt(13, Integer.parseInt(this.txtNoInPacienteAgregar.getText()));
                        }
                        this.st.setInt(14, Integer.parseInt(this.txtCpPacienteAgregar.getText()));
                        this.st.setString(15, this.superCtrl.getClave());
                        this.st.executeUpdate();
                        sql = "SELECT * from paciente where id_paciente=? and rownum=1 order by id_paciente DESC";
                             //select * from paciente where rownum=1 order by id_paciente desc;
                        (this.st = cn.prepareStatement(sql)).setString(1, this.superCtrl.getClave());
                        //(this.rt = this.st.executeQuery()).beforeFirst();
                        this.rt = this.st.executeQuery();
                        if (this.rt.next()) {
                            this.last = this.rt.getInt(1);
                            JOptionPane.showMessageDialog(this, "Se modifico", "Atenci\u00f3n", 1);
                        }
                        else {
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al modificar", "Error", 0);
                        }
                        if (cn != null) {
                            cn.close();
                        }
                    }
                    catch (Throwable t2) {
                        if (cn != null) {
                            try {
                                cn.close();
                            }
                            catch (Throwable exception2) {
                                t2.addSuppressed(exception2);
                            }
                        }
                        throw t2;
                    }
                    this.con.desconectar();
                    this.rt.close();
                    this.st.close();
                    this.limpiar();
                    this.superCtrl.muestraVentanaPacientes(true);
                }
                catch (HeadlessException | NumberFormatException | SQLException ex4) {
                    JOptionPane.showMessageDialog(null,  ex4.getMessage(), "Error", 0);
                }
            }
        }
    
    }//GEN-LAST:event_btnAgregarPacienteAgregarActionPerformed
    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaAgregarPaciente().setVisible(true);
            }
        });
    }

    public void actionPerformed(ActionEvent e) {
        
//'INSERT INTO paciente (nombre,apellidos,genero,edo_civil,ocupacion,tel,email,edo,ciudad,colonia,calle,numero_exterior,numero_interior,cp) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)'

//'UPDATE paciente SET nombre=?,apellidos=?,genero=?,edo_civil=?,ocupacion=?,tel=?,email=?,edo=?,ciudad=?,colonia=?,calle=?,numero_exterior=?,numero_interior=?,cp=? where id_paciente=?'
//'SELECT * from paciente where id_paciente=? order by id_paciente DESC LIMIT 1'

    }

    private void limpiar() {
        this.txtNombrePacienteAgregar.setText(null);
        this.txtApellidosPacienteAgregar.setText(null);
        this.txtOcupacionPacienteAgregar.setText(null);
        this.txtTelefonoPacienteAgregar.setText(null);
        this.txtCorreoPacienteAgregar.setText(null);
        this.txtCiudadPacienteAgregar.setText(null);
        this.txtColoniaPacienteAgregar.setText(null);
        this.txtCallePacienteAgregar.setText(null);
        this.txtNoExPacienteAgregar.setText(null);
        this.txtNoInPacienteAgregar.setText(null);
        this.txtCpPacienteAgregar.setText(null);
        this.cbEdoCivilPacienteAgregar.setSelectedIndex(0);
        this.cbEstadoPacienteAgregar.setSelectedIndex(0);
        this.cbGeneroPacienteAgregar.setSelectedIndex(0);
    }
private void llenar_combo_actividad() {        
    try {
        final String sql="select nombre from estados";
        ConexionBD con2 =new ConexionBD();
        final Connection cn = con2.getConexion();
        PreparedStatement st= cn.prepareStatement(sql);
        ResultSet rt = st.executeQuery();
        while(rt.next()){
            cbEstadoPacienteAgregar.addItem(rt.getString(1));
        }
        con2.desconectar();
    }catch(Exception e){
        JOptionPane.showMessageDialog(this, "Ocurrio un error durante la consulta de estados", "Alerta", 2);
        e.printStackTrace();
    }
    
}
public void modificar() {
        this.btnAgregarPacienteAgregar.setText("Modificar");
        this.btnAgregarPacienteAgregar.setActionCommand("modificar");
        this.btnCancelarPacienteAgregar.setActionCommand("modificar");
        try {
            this.con = new ConexionBD();
            final Connection cn = this.con.getConexion();
            final String sql = "SELECT * from paciente where id_paciente=? and rownum=1 order by id_paciente DESC";
            //SELECT * from paciente where id_paciente=? and rownum=1 order by id_paciente DESC
            (this.st = cn.prepareStatement(sql)).setString(1, this.superCtrl.getClave());
            this.rt = this.st.executeQuery();
            if (this.rt.next()) {
                this.txtNombrePacienteAgregar.setText(this.rt.getString("nombre"));
                this.txtApellidosPacienteAgregar.setText(this.rt.getString("apellidos"));
                this.txtOcupacionPacienteAgregar.setText(this.rt.getString("ocupacion"));
                this.txtTelefonoPacienteAgregar.setText(""+ this.rt.getLong("tel"));
                this.txtCorreoPacienteAgregar.setText(this.rt.getString("email"));
                this.txtCiudadPacienteAgregar.setText(this.rt.getString("ciudad"));
                this.txtColoniaPacienteAgregar.setText(this.rt.getString("colonia"));
                this.txtCallePacienteAgregar.setText(this.rt.getString("calle"));
                this.txtNoExPacienteAgregar.setText(""+ this.rt.getInt("numero_exterior"));
                if (this.rt.getInt("numero_interior") != 0) {
                    this.txtNoInPacienteAgregar.setText(""+ this.rt.getInt("numero_interior"));
                }
                else {
                    this.txtNoInPacienteAgregar.setText(null);
                }
                this.txtCpPacienteAgregar.setText(""+ this.rt.getInt("cp"));
                if (this.rt.getInt("genero") == 1) {
                    this.cbGeneroPacienteAgregar.setSelectedItem("H");
                }
                else {
                    this.cbGeneroPacienteAgregar.setSelectedItem("M");
                }
                this.cbEdoCivilPacienteAgregar.setSelectedItem(this.formato(this.rt.getString("edo_civil")));
                this.cbEstadoPacienteAgregar.setSelectedItem(this.formato(this.rt.getString("edo")));
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error durante la consulta", "Alerta", 2);
        }
    }
    public void agregar() {
        this.btnAgregarPacienteAgregar.setText("Agregar");
        this.btnAgregarPacienteAgregar.setActionCommand("agregar");
        this.btnCancelarPacienteAgregar.setActionCommand("agregar");
    }

    private String formato(String string) {
        string = string.toLowerCase();
        char[] caracteres = string.toCharArray();
        caracteres[0] = Character.toUpperCase(caracteres[0]);

        for (int i = 0; i < string.length() - 2; i++) {

            if (caracteres[i] == ' ' || caracteres[i] == '.' || caracteres[i] == ',') {
                caracteres[i + 1] = Character.toUpperCase(caracteres[i + 1]);
            }
        }
        return new String(caracteres);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarPacienteAgregar;
    private javax.swing.JButton btnCancelarPacienteAgregar;
    private javax.swing.JComboBox<String> cbEdoCivilPacienteAgregar;
    private javax.swing.JComboBox<String> cbEstadoPacienteAgregar;
    private javax.swing.JComboBox<String> cbGeneroPacienteAgregar;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel lblApellidosPacienteAgregar;
    private javax.swing.JLabel lblCallePacienteAgregar;
    private javax.swing.JLabel lblCiudadPacienteAgregar;
    private javax.swing.JLabel lblColoniaPacienteAgregar;
    private javax.swing.JLabel lblCorreoPacienteAgregar;
    private javax.swing.JLabel lblCpPacienteAgregar;
    private javax.swing.JLabel lblEdoCivilPacienteAgregar;
    private javax.swing.JLabel lblEstadoPacienteAgregar;
    private javax.swing.JLabel lblGeneroPacienteAgregar;
    private javax.swing.JLabel lblNoExPacienteAgregar;
    private javax.swing.JLabel lblNoInPacienteAgregar;
    private javax.swing.JLabel lblNombrePacienteAgregar;
    private javax.swing.JLabel lblOcupacionPacienteAgregar;
    private javax.swing.JLabel lblTelefonoPacienteAgregar;
    private javax.swing.JTextField txtApellidosPacienteAgregar;
    private javax.swing.JTextField txtCallePacienteAgregar;
    private javax.swing.JTextField txtCiudadPacienteAgregar;
    private javax.swing.JTextField txtColoniaPacienteAgregar;
    private javax.swing.JTextField txtCorreoPacienteAgregar;
    private javax.swing.JTextField txtCpPacienteAgregar;
    private javax.swing.JTextField txtNoExPacienteAgregar;
    private javax.swing.JTextField txtNoInPacienteAgregar;
    private javax.swing.JTextField txtNombrePacienteAgregar;
    private javax.swing.JTextField txtOcupacionPacienteAgregar;
    private javax.swing.JTextField txtTelefonoPacienteAgregar;
    // End of variables declaration//GEN-END:variables
}
